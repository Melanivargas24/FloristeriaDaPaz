@model DaPazWebApp.Models.FacturaProveedorModel
@{
    ViewData["Title"] = "Crear Factura Proveedor";
    Layout = "_Layout";
    var productos = ViewBag.Productos as List<DaPazWebApp.Models.Producto>;
    var productosPorProveedor = new Dictionary<string, List<object>>();
    if (productos != null)
    {
        foreach (var p in productos)
        {
            if (p.IdProveedor.HasValue)
            {
                var key = p.IdProveedor.Value.ToString();
                if (!productosPorProveedor.ContainsKey(key))
                    productosPorProveedor[key] = new List<object>();
                productosPorProveedor[key].Add(new
                {
                    idProducto = p.IdProducto,
                    nombreProducto = p.NombreProducto,
                    precio = p.Precio,
                    precioCompra = p.PrecioCompra
                });
            }
        }
    }
}

<div class="container" style="margin-top:35px; margin-bottom:135px">
    <div class="d-flex justify-between align-items-center encabezado-proveedores">
        <h2>Crear Factura Proveedor</h2>
    </div>
    <form asp-action="Crear" method="post">
        <div class="form-group">
            <label asp-for="IdProveedor" class="control-label" for="IdProveedor">Proveedor</label>
            <select asp-for="IdProveedor" class="form-control" asp-items="ViewBag.Proveedores" id="IdProveedor">
                <option value="">Seleccione un proveedor</option>
            </select>
            <span asp-validation-for="IdProveedor" class="text-danger"></span>
        </div>
        <!-- Fecha autom치tica, no editable -->
        <input type="hidden" asp-for="FechaFactura" id="FechaFactura" />
        <hr />
        <h5>Productos de la factura</h5>
        <table class="table table-bordered" id="tablaProductosFactura">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio Venta</th>
                    <th>Precio Compra</th>
                    <th>Cantidad</th>
                    <th>Subtotal (Compra)</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="detalleFacturaBody">
                <!-- Filas din치micas -->
            </tbody>
        </table>
        <button type="button" class="btn btn-success" id="agregarProductoBtn">Agregar Producto</button>
        <hr />
        <div class="form-group">
            <label class="control-label" for="totalFactura">Total Factura</label>
            <input asp-for="TotalFactura" class="form-control" id="totalFactura" readonly />
        </div>
        <br />
        <div class="d-flex justify-content-end gap-2 mt-4">
            <button type="submit" class="btn-guardar">Guardar</button>
            <a asp-action="Index" class="btn-cancelar">Cancelar</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        var productosPorProveedor = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productosPorProveedor));
        var productos = [];
        function calcularSubtotal(precioCompra, cantidad) {
            return (parseFloat(precioCompra) || 0) * (parseInt(cantidad) || 0);
        }
        function actualizarTotal() {
            let total = 0;
            $('#detalleFacturaBody tr').each(function () {
                var subtotal = parseFloat($(this).find('.subtotal').val()) || 0;
                total += subtotal;
            });
            $('#totalFactura').val(total.toFixed(2));
        }
        function renderProductoOptions() {
            return productos.map(p => `<option value="${p.idProducto}" data-precio="${p.precio}" data-preciocompra="${p.precioCompra}">${p.nombreProducto}</option>`).join('');
        }
        function agregarFila() {
            var index = $('#detalleFacturaBody tr').length;
            var fila = `<tr>
                    <td>
                        <select name="Detalles[${index}].IdProducto" class="form-control producto-select">
                            <option value="">Seleccione un producto</option>
                            ${renderProductoOptions()}
                        </select>
                    </td>
                    <td><input type="number" name="Detalles[${index}].PrecioVenta" class="form-control precio-venta" min="0" step="0.01" /></td>
                    <td><input type="number" name="Detalles[${index}].PrecioUnitario" class="form-control precio-compra" min="0" step="0.01" /></td>
                    <td><input type="number" name="Detalles[${index}].Cantidad" class="form-control cantidad" min="1" value="1" /></td>
                    <td><input type="number" name="Detalles[${index}].Subtotal" class="form-control subtotal" readonly /></td>
                    <td><button type="button" class="btn btn-danger btn-remove-producto">Quitar</button></td>
                </tr>`;
            $('#detalleFacturaBody').append(fila);
        }
        $(document).ready(function () {
            $('#agregarProductoBtn').click(function () {
                agregarFila();
            });

            // Filtrar productos por proveedor seleccionado
            $('#IdProveedor').change(function () {
                var proveedorId = $(this).val();
                if (proveedorId && productosPorProveedor[proveedorId]) {
                    productos = productosPorProveedor[proveedorId];
                } else {
                    productos = [];
                }
                // Actualizar selects existentes
                $('#detalleFacturaBody .producto-select').each(function () {
                    var selected = $(this).val();
                    $(this).html('<option value="">Seleccione un producto</option>' + renderProductoOptions());
                    if (selected) $(this).val(selected);
                });
            });

            $('#detalleFacturaBody').on('change', '.producto-select', function () {
                var precio = $(this).find('option:selected').data('precio') || 0;
                var precioCompra = $(this).find('option:selected').data('preciocompra') || 0;
                $(this).closest('tr').find('.precio-venta').val(precio);
                $(this).closest('tr').find('.precio-compra').val(precioCompra);
                $(this).closest('tr').find('.cantidad').val(1);
                var subtotal = calcularSubtotal(precioCompra, 1);
                $(this).closest('tr').find('.subtotal').val(subtotal.toFixed(2));
                actualizarTotal();
            });
            $('#detalleFacturaBody').on('input', '.precio-venta, .precio-compra, .cantidad', function () {
                var tr = $(this).closest('tr');
                var precioCompra = parseFloat(tr.find('.precio-compra').val()) || 0;
                var cantidad = parseInt(tr.find('.cantidad').val()) || 0;
                var subtotal = calcularSubtotal(precioCompra, cantidad);
                tr.find('.subtotal').val(subtotal.toFixed(2));
                actualizarTotal();
            });
            $('#detalleFacturaBody').on('click', '.btn-remove-producto', function () {
                let row = $(this).closest('tr');
                row.remove();
                // Reindexar los nombres de los inputs
                $('#detalleFacturaBody tr').each(function (i, tr) {
                    $(tr).find('select, input').each(function () {
                        var name = $(this).attr('name');
                        if (name) {
                            var newName = name.replace(/Detalles\[\d+\]/, 'Detalles[' + i + ']');
                            $(this).attr('name', newName);
                        }
                    });
                });
                actualizarTotal();
            });
            $('form').submit(function (e) {
                let error = false;

                // No forzar conversi칩n de decimales, enviar como el usuario los ingresa

                // Log para depuraci칩n: mostrar los nombres y valores de los inputs
                $('#detalleFacturaBody tr').each(function (i) {
                    const tr = $(this);
                    tr.find('select, input').each(function () {
                        var name = $(this).attr('name');
                        var value = $(this).val();
                        console.log('Fila ' + i + ': name=' + name + ', value=' + value);
                    });
                });

                $('#detalleFacturaBody tr').each(function () {
                    const tr = $(this);
                    const idProducto = tr.find('.producto-select').val();
                    const cantidad = tr.find('.cantidad').val();
                    const precioCompra = tr.find('.precio-compra').val();
                    const precioVenta = tr.find('.precio-venta').val();

                    if (!idProducto || !cantidad || !precioCompra || !precioVenta) {
                        error = true;
                    }
                });

                if (error) {
                    e.preventDefault();
                    alert("Todos los productos deben tener valor: producto, cantidad, precios.");
                    return;
                }

                // Calcular total antes de enviar
                let total = 0;
                $('#detalleFacturaBody tr').each(function () {
                    var subtotal = parseFloat($(this).find('.subtotal').val()) || 0;
                    total += subtotal;
                });
                $('#totalFactura').val(total.toFixed(2));
            });
            
        });
    </script>
        @Html.RenderPartialAsync("_ValidationScriptsPartial");
}
